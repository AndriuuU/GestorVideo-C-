@page "/dispositivos"
@using VideoMatrix.Models
@using VideoMatrix.Services
@inject DeviceService DeviceService

<h2 class="page-title">Dispositivos</h2>

<div class="device-container">
    <div class="device-section">
        <h3 class="section-title">Transmisores</h3>
        <div class="grid">
            @foreach (var transmitter in transmitters)
            {
                <div class="grid-item">
                    <div class="device-header">
                        <h4 class="device-name">@transmitter.Name</h4>
                        <p class="device-ip">@transmitter.IpAddress</p>
                    </div>
                    @if (transmitter.Status == DeviceStatus.Activo) 
                    {
                        <img src="@transmitter.ImageUrl" alt="Imagen de @transmitter.Name" class="device-image" />
                    }
                    else
                    {
                        <p class="device-status inactivo">Estado: @transmitter.Status</p>
                    }
                </div>
            }
        </div>
    </div>

    <div class="device-section">
        <h3 class="section-title">Receptores</h3>
        <div class="grid">
            @foreach (var receiver in receivers)
            {
                <div class="grid-item">
                    <div class="device-header">
                        <h4 class="device-name">@receiver.Name</h4>
                        <p class="device-ip">@receiver.IpAddress</p>
                    </div>
                    @if (receiver.Status == DeviceStatus.Activo)
                    {
                        <img src="@receiver.ImageUrl" alt="Imagen de @receiver.Name" class="device-image" />
                    }
                    else
                    {
                        <p class="device-status inactivo">Estado: @receiver.Status</p>
                    }
                </div>
            }
        </div>
    </div>
</div>

<style>
    .page-title {
        font-size: 2.5rem;
        text-align: center;
        margin-bottom: 1rem;
        color: #333;
    }

    .device-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 16px;
    }

    .device-section {
        margin-bottom: 2rem;
    }

    .section-title {
        font-size: 2rem;
        color: #555;
        margin-bottom: 1rem;
        border-bottom: 2px solid #ddd;
        padding-bottom: 0.5rem;
    }

    .grid {
        display: flex;
        flex-wrap: wrap;
        gap: 24px;
    }

    .grid-item {
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 16px;
        width: calc(25% - 24px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s, box-shadow 0.3s;
    }

    .grid-item:hover {
        transform: translateY(-5px);
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
    }

    .device-header {
        margin-bottom: 1rem;
    }

    .device-name {
        font-size: 1.25rem;
        color: #333;
    }

    .device-ip {
        font-size: 0.9rem;
        color: #777;
    }

    .device-image {
        max-width: 100%;
        height: auto;
        border-radius: 8px;
    }

    .device-status {
        font-size: 1rem;
        color: #fff;
        padding: 8px;
        border-radius: 4px;
    }

    .device-status.inactivo {
        background-color: #e74c3c;
    }
</style>

@code {
    private List<Transmitter> transmitters = new();
    private List<Receiver> receivers = new();

    protected override async Task OnInitializedAsync()
    {
        transmitters = await DeviceService.GetTransmittersAsync();
        receivers = await DeviceService.GetReceiversAsync();
    }
}
